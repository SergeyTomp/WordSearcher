Упражнение заключается в написании механизма текстового поиска с возможностью запустить из командной строки.

Привет:

java -jar < mainClassFile> < pathToDirectoryContainingTextFiles>

Нужно прочитать все текстовые файлы в данном каталоге, создать in-memory представление файлов и их содержимого, а затем выдать результат в командную строку, в которой можно
выполнить интерактивный поиск.

Пример:

$ java ​-jar SimpleSearch.jar Searcher /foo/bar
14 files read in directory /foo/bar
search> to be or not to be
file1.txt:100%
file2.txt:90%
search>
search> cats
no matches found
search> :quit

Поиск должен принимать слова, указанные в командной строке, и возвращать список из 10 лучших
совпадающих имен файлов в порядке рангов, давая оценку рангов по каждому совпадению.

Примечание. Мы хотели бы увидеть работающее консольное приложение
(можно предположить, что входные строки нормальны).

Ранжирование:
- Оценка рейтинга должна быть 100%, если файл содержит все слова
- Должно быть 0%, если не содержит ни одного слова
- Должно быть от 0 до 100, если оно содержит только некоторые слова, но точная формула ранжирования зависит от вас, чтобы выбрать и реализовать

Ожидания (пожалуйста, прочитайте внимательно):

- Программа должна запускаться и возвращать результаты по поисковым запросам
- Код должен включать тесты и быть хорошо структурированным для поддержки будущего обслуживания и развития. Попробуйте использовать лучшие практики.
- Запрещены внешние библиотеки, кроме test/mocking фреймворков

Что нужно учитывать при реализации:

- Составление рейтинга - начните с чего-то простого
- Поиск должен быть относительно эффективным

Результат:
- Реализация, тестовый код и скомпилированная программа для вышеперечисленного
- README, содержащий инструкции, чтобы мы знали, как запустить ваш код

Пример отправной точки на следующей странице

import​ java.io.File;
import​ java.util.Scanner;

public class​ Main {
​   public static void​ main(String[] args) {
​       if​ (args.​length​ == ​0​) {​throw new​ IllegalArgumentException(​"No directory given to index."​);}
        ​final​ File indexableDirectory = ​new​ File(args[​0​]);
​       //TODO: Index all files in indexableDirectory
    ​   try ​(Scanner keyboard = ​new​ Scanner(System.​in​)) {
​           while​ (​true​) {
            System.​out​.print(​"search> "​);
        ​   final​ String line = keyboard.nextLine();
​       // ​TODO: Search indexed files for words in line
            }
        }
    }
}
